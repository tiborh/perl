#!/usr/bin/perl -w

use strict;
use Cwd;
use Time::Piece;
use File::Basename;
use Getopt::Std;
use v5.14;
use XML::Parser;

my $DEBUG = 0;

die "XML file to check is required as an argument." if ($#ARGV == -1);
my $inXML = shift @ARGV;
die "File $inXML does not exist." unless (-e $inXML);
die "Empty file: $inXML" if (-s $inXML == 0);

&xml_checker($inXML);
# &xml_dumper($inXML);
my $xml_tree = &get_xml_tree($inXML);
&parse_tree($xml_tree);

# if ($xml_tree->[0] eq 'doc') {
#     print "<",shift @$xml_tree;
# } else {
#     die "Not a valid document. (first tag should be a 'doc')";
# }

# $xml_tree = shift @$xml_tree;

# if (ref $xml_tree eq 'ARRAY') {
#     &process_first_item(shift @$xml_tree);
#     &process_second_item(shift @$xml_tree);
#     &process_third_item(shift @$xml_tree);
#     &parse_tree2($xml_tree);
# } else  {
#     die "Not a valid document. (an array reference should follow 'doc'.";
# }

sub xml_checker() {
    my $inXML = $_[0];

# initialize parser object and parse the string
    my $parser = XML::Parser->new( ErrorContext => 2 );
    eval { $parser->parsefile( $inXML ); };
    
# report any error that stopped parsing, or announce success
    if( $@ ) {
	$@ =~ s/at \/.*?$//s;               # remove module line number
	print STDERR "\nERROR in '$inXML':\n$@\n";
	return 0;
    } else {
	print STDERR "'$inXML' is well-formed\n";
	return 1;
    }
}

sub get_xml_tree() {
    my $inXML = $_[0];

# initialize parser and read the file
    my $parser = new XML::Parser( Style => 'Tree' );
    my $tree = $parser->parsefile( $inXML );
 
    return $tree;
}

sub parse_tree() {
    my $xml_tree = shift;
    my $tag_name = "";
    my $tag_attribs = "";
    my $array_size = $#$xml_tree+1;
    print "array size: $array_size\n";
    print "inside:\n@$xml_tree\n";
    print "<$_>\n" foreach (@$xml_tree);
    $tag_name = shift @$xml_tree;
    my $hash_item = shift @{$xml_tree->[0]};
    $tag_attribs = &process_attrib_hash($hash_item);
    my $open_tag = "<" . $tag_name . $tag_attribs . ">";
    print $open_tag;
    my $close_tag = "</" . $tag_name . ">";
    print $close_tag;
    #$hash_item = shift @{$xml_tree->[0]};

    &process_first_item($hash_item);
    &process_second_item(shift @{$xml_tree->[0]});
    &process_third_item(shift @{$xml_tree->[0]});
    $array_size = $#$xml_tree+1;
    print "array size: $array_size\n";
    print "inside:\n";
    print "<$_>\n" foreach (@{$xml_tree->[0]});
}

# The following is more like a dumper
sub parse_tree2() {
    my $xml_tree = shift;
    print "inside: @$xml_tree\n";
    if (ref $xml_tree) {
	given (ref $xml_tree) {
	    when (/ARRAY/) {
		#foreach (@$xml_tree) {
		    print shift @$xml_tree;
		    $xml_tree = shift @$xml_tree;
		    &process_first_item(shift @$xml_tree);
		    &process_second_item(shift @$xml_tree);
		    &process_third_item(shift @$xml_tree);
		    print "remaining: ",$xml_tree,"\n";
		    print "inside: @$xml_tree\n";
		    #&parse_tree2($_);
		    #print "$prefix]\n";
		#}
	    }
	    when (/HASH/) {
		print "\{\n";
		foreach (keys %$xml_tree) {
		    print "$_=";
		    print "\"$xml_tree->{$_}\",";
		    #&parse_tree($xml_tree->{$_})
		}
		print "\}\n";
	    }
	    when (/^\s*$/m) {}
	    default { 
		print "<!-- <<<<<Default branch>>>>>> -->\n";
		print $xml_tree,"\n";
	    }
	}
    } elsif ($xml_tree) {
	print $xml_tree,"\n" unless ($xml_tree =~ /^\s*$/m);
    }
    # print ref $xml_tree,"\n";
    # if ('ARRAY' eq ref $xml_tree) {
    # 	print $_\n" foreach (@$xml_tree);
    # }
}

sub process_first_item() {
    print ">>>First item: ",shift,"\n";
}

sub process_second_item() {
    print ">>>Second item: ",shift,"\n";
}

sub process_third_item() {
    print ">>>Third item: '",shift,"'\n";
}

sub process_attrib_hash() {
    my $attrib_hash = shift;
    my $attrib_string = "";
    foreach (keys %$attrib_hash) {
	$attrib_string .= " $_=";
	$attrib_string .= "\"$attrib_hash->{$_}\"";
    }
    return $attrib_string;
}
